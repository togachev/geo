import 'ol/ol.css';
import Feature from 'ol/Feature';
import MVT from 'ol/format/MVT';
import Map from 'ol/Map';
import VectorTileLayer from 'ol/layer/VectorTile';
import VectorTileSource from 'ol/source/VectorTile';
import TileLayer from 'ol/layer/WebGLTile';
import { MouseWheelZoom, defaults } from "ol/interaction";
import XYZ from 'ol/source/XYZ';
import View from 'ol/View';
import {Circle, Fill, Stroke, Style, Text} from 'ol/style';
import {fromLonLat, transform} from 'ol/proj';
import Overlay from 'ol/Overlay';
import {ZoomToExtent, ScaleLine, defaults as defaultControls} from 'ol/control';

import {pointerMove} from 'ol/events/condition';

const container = document.getElementById('geo-popup');
const content = document.getElementById('geo-popup-content');
const closer = document.getElementById('geo-popup-closer');
const name_popup = document.getElementById('geo-popup-name-popup');

const overlay = new Overlay({
  element: container,
  autoPan: true,
  autoPanAnimation: {
  duration: 250,
  },
});

const attributions = '© <a href="https://www.openstreetmap.org/copyright">' + 'OpenStreetMap contributors</a>';

// lookup for selection objects
let selection = {};

const styles = (feature) => {
  const data = feature.getProperties();
  var keys = ['les', 'uch_les', 'uroch', 'kvartal', 'vydel', 'term_p_num']; //поля-подписи
  var labels = "";

  for(let i in keys) {
    if (typeof data[keys[i]] == 'string') {
      if (data[keys[i]].length > 0) {
        labels += `${data[keys[i]]}\n`;
      }
    } else if (typeof data[keys[i]] === 'number') {
      labels += `${data[keys[i]]}\n`;
    } 
  }

  return [
    new Style({
      stroke: new Stroke({
        color: 'rgba(0, 134, 255, 1)',
        width: 0.5,
        }),
      fill: new Fill({
        color: 'rgba(255, 255, 255, 0.8)',
      }),
    }),
    new Style({
      image: new Circle({
        radius: 5,
        fill: new Fill({
          color: 'black',
        }),
        stroke: new Stroke({
            color: 'rgba(0,134,255,0.9)',
            width: 1
        })
    })
  }),
    new Style({
      text: new Text({
        text: labels,
        font: '12px Calibri,sans-serif',
        overflow: true,
        fill: new Fill({
          color: '#000',
        }),
        stroke: new Stroke({
          color: '#fff',
          width: 3,
        }),
      }),
    })
  ]
};

const selectedCountry = new Style({
  stroke: new Stroke({
    color: 'rgba(245,121,0,1)',
    width: 2,
  }),
  fill: new Fill({
    color: 'rgba(245,121,0,0.1)',
  }),
  image: new Circle({
    radius: 5,
    fill: new Fill({
      color: 'black',
    }),
    stroke: new Stroke({
      color: 'rgba(16,106,144,0.5)',
      width: 10
    })
  })
});

const vtLayer = [];

for(let i in layer_id) {
  vtLayer.push(
    new VectorTileLayer({
      declutter: true,
      minZoom: minzoom[i],
      maxZoom: maxzoom[i],
      renderBuffer: 50,
      renderMode: 'vector',
      updateWhileAnimating: false,
      source: new VectorTileSource({
        format: new MVT({featureClass: Feature}),
        url: 'http://192.168.14.142/geo/layer/' + layer_id[i] + '/tile/{z}/{x}/{y}',
      }),
      style: styles,
    })
  );
}

const base_map = new TileLayer({
  source: new XYZ({
    attributions: attributions,
    url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'
  }),
});

const map = new Map({
  interactions: defaults({mouseWheelZoom: false}).extend([
    new MouseWheelZoom({
      constrainResolution: true // force zooming to a integer zoom
    })
  ]),
  controls: defaultControls().extend([
    new ScaleLine(),
  ]),
  renderer: 'webgl',
  layers: [].concat(base_map, vtLayer),
  overlays: [overlay],
  moveTolerance: 10,
  target: 'map',
  view: new View({
    center: fromLonLat([70.538086, 62.201629]),
    enableRotation: false,
    zoom: 6,
    multiWorld: true,
  }),
});

var extent = map.getView().calculateExtent(map.getSize());
const span = document.createElement('span');
span.innerHTML = house_fill;
const zoomToExtentControl = new ZoomToExtent({
  extent: extent,
  label: span
});

map.addControl(zoomToExtentControl);

// Selection


// Чувствительность идентификации
var hit = 5;

// var selectionLayer = new VectorTileLayer({
//   map: map,
//   renderMode: 'vector',
//   source: vtLayer[0].getSource(),
//   style: function (feature) {
//     if (feature.get('id') in selection) {
//       // console.log(vtLayer);
//       return selectedCountry;
//     }
//   },
// });

// var getResId = function (pixel) {
//   const res_id = map.forEachFeatureAtPixel(pixel, function(feature) {
//     const lname = feature.getProperties().layer;
//     for(let i in layer_id) {
//       if (lname == layer_name[i]){
//         console.log(i);
//         return i;
//       }
//     }
//   });
// };

const selectVT = function (pixel) {
  
  var res_id = map.forEachFeatureAtPixel(pixel, function(feature) {
    const lname = feature.getProperties().layer;
    for(let i in layer_id) {
      if (lname == layer_name[i]){
        
        console.log(i);
        return i;
      }
    }
  });
  
// --------------настроить одиночное выделение---------------
vtLayer[i].getSource().clear();
// -----------------------------
  if (res_id) {
    
    var selectionLayer = new VectorTileLayer({
      map: map,
      renderMode: 'vector',
      source: vtLayer[res_id].getSource(),
      style: function (feature) {
        if (feature.get('id') in selection) {
          // console.log(vtLayer);
          return selectedCountry;
        }
      },
    })
  
    vtLayer[res_id].getFeatures(pixel).then(function (features) {
  
      if (!features.length) {
        selection = {};
        selectionLayer.changed();
        return;
      }
      const feature = features[0];
      if (!feature) {
        return;
      }
      const fid = feature.get('id');
  
      selection = {};
      selection[fid] = feature;
  
      selectionLayer.changed();
    },
    {
      hitTolerance: 50,
    });
    
  }

};

map.on('click', function(evt) {
  console.log(evt);
  
  selectVT(evt.pixel);
  const coordinate = evt.coordinate;
  const coords = transform(coordinate, 'EPSG:3857','EPSG:4326');
  const latlon = '<tr><td>Lon-Lat: </td><td class="popup-text">' + coords[0].toFixed(6) + ', ' + coords[1].toFixed(6) + '</td></tr>';
  let html = map.forEachFeatureAtPixel(evt.pixel, function(features) {
    const data = features.getProperties();
    var attribute = '<table class="popup-text-all">';
    const {layer, ...rest} = data;
    const newObj = Object.assign({}, {...rest});
    for(let key in newObj) {
      if (typeof data[key] == 'string') {
        if (data[key].length > 0) {
          attribute += '<tr><td>' + key + '</td><td class="popup-text">' + data[key] + '</td></tr>';
        }
      } else if (typeof data[key] === 'number') {
        attribute += '<tr><td>' + key + '</td><td class="popup-text">' + data[key] + '</td></tr>';
      }
    }
    attribute += latlon + '</table>';
    return attribute;
  },
  {
    hitTolerance: hit,
  });
  //название слоя для всплывающего окна
  let lname = map.forEachFeatureAtPixel(evt.pixel, function(features) {
    const data = features.getProperties();
    return data.layer;
  },
  {
    hitTolerance: hit,
  });

  if (html) {
    name_popup.innerHTML = lname;
    content.innerHTML = html; 
  } else {
    name_popup.innerHTML = null;
    content.innerHTML = latlon;
  }
  
  let pos = '';
  overlay.setPosition([pos[0], (pos[3]-pos[1])/2]);
  closer.onclick = function () {
    overlay.setPosition(undefined);
    closer.blur();
    return false;
  };
},
{
    hitTolerance: hit,
});

